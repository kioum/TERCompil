# 1 "lexer.mll"
 
  (* Analyse lexicale *)
  
  open Lexing
  open Parser
  
  let id_or_keyword =
    let h = Hashtbl.create 17 in
    List.iter (fun (s, k) -> Hashtbl.add h s k)
      [ "true",     CONST_BOOL(true);
	"false",    CONST_BOOL(false);
	"if",       IF;
	"else",     ELSE;
	"int",      INT;
	"String",   STRING;
	"boolean",  BOOL;
	"class",    CLASS;
	"extends",  EXTENDS;
	"for",      FOR;
	"return",   RETURN;
	"new",      NEW;
	"public",   PUBLIC;
	"static",   STATIC;
	"this",     THIS;
	"void",     VOID;
	"instanceof", INSTOF;
	"null",     NULL
      ] ;
    fun s ->
      try  Hashtbl.find h s
      with Not_found -> IDENT(s)
  
  (* DÃ©claration d'une exception *)
  exception Lexical_error of string

# 38 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\220\255\221\255\002\000\001\000\002\000\003\000\230\255\
    \031\000\033\000\236\255\237\255\238\255\239\255\240\255\241\255\
    \242\255\243\255\244\255\245\255\013\000\052\000\249\255\088\000\
    \192\000\163\000\086\000\003\000\255\255\252\255\253\255\020\001\
    \104\001\188\001\016\002\100\002\018\000\013\000\015\000\050\000\
    \020\000\020\000\030\000\036\000\031\000\248\255\247\255\246\255\
    \229\255\228\255\226\255\224\255\223\255\222\255\145\000\245\255\
    \146\000\144\002\255\255\248\255\249\255\250\255\251\255\252\255\
    \253\255\254\255\237\001\251\255\252\255\101\000\107\000\255\255\
    \254\255\253\255\014\002\251\255\252\255\103\000\109\000\255\255\
    \254\255\253\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\035\000\035\000\030\000\028\000\255\255\
    \024\000\020\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\022\000\021\000\255\255\005\000\
    \005\000\004\000\023\000\001\000\255\255\255\255\255\255\005\000\
    \005\000\005\000\005\000\005\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \008\000\009\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\003\000\003\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\003\000\003\000\255\255\
    \255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\056\000\000\000\
    \056\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\068\000\000\000\000\000\255\255\255\255\000\000\
    \000\000\000\000\076\000\000\000\000\000\255\255\255\255\000\000\
    \000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\027\000\028\000\000\000\027\000\027\000\000\000\000\000\
    \027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \027\000\008\000\022\000\027\000\000\000\010\000\004\000\052\000\
    \018\000\017\000\007\000\021\000\012\000\020\000\019\000\026\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\047\000\011\000\006\000\009\000\005\000\051\000\
    \050\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\024\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\016\000\049\000\015\000\048\000\046\000\
    \040\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\014\000\003\000\013\000\053\000\023\000\
    \030\000\037\000\038\000\039\000\041\000\029\000\042\000\043\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\044\000\045\000\073\000\072\000\081\000\080\000\
    \000\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\058\000\255\255\000\000\000\000\023\000\
    \000\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\
    \000\000\000\000\000\000\000\000\000\000\057\000\255\255\000\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\000\000\000\000\000\000\000\000\023\000\
    \000\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\031\000\023\000\023\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\000\000\
    \000\000\000\000\000\000\023\000\000\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\032\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \000\000\055\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\000\000\000\000\000\000\000\000\023\000\
    \000\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\033\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\000\000\071\000\
    \000\000\000\000\000\000\000\000\000\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\069\000\
    \079\000\000\000\000\000\023\000\070\000\023\000\023\000\023\000\
    \023\000\034\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \077\000\000\000\000\000\000\000\000\000\078\000\000\000\000\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\000\000\000\000\000\000\000\000\023\000\
    \000\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\035\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\036\000\000\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\065\000\
    \000\000\000\000\000\000\023\000\000\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\064\000\067\000\000\000\000\000\
    \000\000\000\000\063\000\000\000\000\000\000\000\062\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\061\000\000\000\
    \000\000\000\000\060\000\000\000\059\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\075\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\027\000\000\000\255\255\255\255\
    \027\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\027\000\255\255\000\000\000\000\004\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\020\000\000\000\000\000\000\000\000\000\005\000\
    \006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\008\000\000\000\009\000\021\000\
    \039\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\023\000\
    \026\000\036\000\037\000\038\000\040\000\026\000\041\000\042\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\043\000\044\000\069\000\070\000\077\000\078\000\
    \255\255\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\054\000\056\000\255\255\255\255\023\000\
    \255\255\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\024\000\
    \255\255\255\255\255\255\255\255\255\255\054\000\056\000\255\255\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\255\255\255\255\255\255\255\255\024\000\
    \255\255\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\031\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\255\255\
    \255\255\255\255\255\255\031\000\255\255\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\032\000\
    \255\255\054\000\056\000\255\255\255\255\255\255\255\255\255\255\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\255\255\255\255\255\255\255\255\032\000\
    \255\255\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\033\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\255\255\066\000\
    \255\255\255\255\255\255\255\255\255\255\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\066\000\
    \074\000\255\255\255\255\033\000\066\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\034\000\
    \074\000\255\255\255\255\255\255\255\255\074\000\255\255\255\255\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\255\255\255\255\255\255\255\255\034\000\
    \255\255\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\035\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\035\000\255\255\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\057\000\
    \255\255\255\255\255\255\035\000\255\255\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\057\000\066\000\255\255\255\255\
    \255\255\255\255\057\000\255\255\255\255\255\255\057\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\057\000\255\255\
    \255\255\255\255\057\000\255\255\057\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\074\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 50 "lexer.mll"
      ( new_line lexbuf; token lexbuf )
# 329 "lexer.ml"

  | 1 ->
# 52 "lexer.mll"
      ( token lexbuf )
# 334 "lexer.ml"

  | 2 ->
# 54 "lexer.mll"
      ( comment lexbuf; token lexbuf )
# 339 "lexer.ml"

  | 3 ->
# 56 "lexer.mll"
      ( comment_line lexbuf; token lexbuf )
# 344 "lexer.ml"

  | 4 ->
# 58 "lexer.mll"
      ( CONST_INT (Int32.of_string (lexeme lexbuf)) )
# 349 "lexer.ml"

  | 5 ->
# 60 "lexer.mll"
      ( id_or_keyword (lexeme lexbuf) )
# 354 "lexer.ml"

  | 6 ->
# 62 "lexer.mll"
      ( lire_string (Buffer.create 17) lexbuf )
# 359 "lexer.ml"

  | 7 ->
# 64 "lexer.mll"
      ( PRINTLN )
# 364 "lexer.ml"

  | 8 ->
# 66 "lexer.mll"
      ( PUN )
# 369 "lexer.ml"

  | 9 ->
# 68 "lexer.mll"
      ( MUN )
# 374 "lexer.ml"

  | 10 ->
# 70 "lexer.mll"
      ( PT )
# 379 "lexer.ml"

  | 11 ->
# 72 "lexer.mll"
      ( OP )
# 384 "lexer.ml"

  | 12 ->
# 74 "lexer.mll"
      ( CP )
# 389 "lexer.ml"

  | 13 ->
# 76 "lexer.mll"
      ( OC )
# 394 "lexer.ml"

  | 14 ->
# 78 "lexer.mll"
      ( CC )
# 399 "lexer.ml"

  | 15 ->
# 80 "lexer.mll"
      ( OA )
# 404 "lexer.ml"

  | 16 ->
# 82 "lexer.mll"
      ( CA )
# 409 "lexer.ml"

  | 17 ->
# 84 "lexer.mll"
      ( COMMA )
# 414 "lexer.ml"

  | 18 ->
# 86 "lexer.mll"
      ( SEMI )
# 419 "lexer.ml"

  | 19 ->
# 88 "lexer.mll"
      ( MOD )
# 424 "lexer.ml"

  | 20 ->
# 90 "lexer.mll"
      ( SET )
# 429 "lexer.ml"

  | 21 ->
# 92 "lexer.mll"
      ( PLUS )
# 434 "lexer.ml"

  | 22 ->
# 94 "lexer.mll"
      ( MINUS )
# 439 "lexer.ml"

  | 23 ->
# 96 "lexer.mll"
      ( DIV )
# 444 "lexer.ml"

  | 24 ->
# 98 "lexer.mll"
      ( NOT )
# 449 "lexer.ml"

  | 25 ->
# 100 "lexer.mll"
      ( MULT )
# 454 "lexer.ml"

  | 26 ->
# 102 "lexer.mll"
      ( EQUAL )
# 459 "lexer.ml"

  | 27 ->
# 104 "lexer.mll"
      ( NEQ )
# 464 "lexer.ml"

  | 28 ->
# 106 "lexer.mll"
      ( LT )
# 469 "lexer.ml"

  | 29 ->
# 108 "lexer.mll"
      ( LE )
# 474 "lexer.ml"

  | 30 ->
# 110 "lexer.mll"
      ( MT )
# 479 "lexer.ml"

  | 31 ->
# 112 "lexer.mll"
      ( ME )
# 484 "lexer.ml"

  | 32 ->
# 114 "lexer.mll"
      ( AND )
# 489 "lexer.ml"

  | 33 ->
# 116 "lexer.mll"
      ( OR )
# 494 "lexer.ml"

  | 34 ->
# 118 "lexer.mll"
      ( EOF )
# 499 "lexer.ml"

  | 35 ->
# 120 "lexer.mll"
      (
	(* Quelque chose d'inconnu *)
	raise (Lexical_error "CaractÃ¨re invalide")
      )
# 507 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and lire_string buf lexbuf =
    __ocaml_lex_lire_string_rec buf lexbuf 54
and __ocaml_lex_lire_string_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 127 "lexer.mll"
 ( CONST_STRING (Buffer.contents buf) )
# 519 "lexer.ml"

  | 1 ->
# 129 "lexer.mll"
 ( Buffer.add_char buf '/'; lire_string buf lexbuf )
# 524 "lexer.ml"

  | 2 ->
# 131 "lexer.mll"
 ( Buffer.add_char buf '\\'; lire_string buf lexbuf )
# 529 "lexer.ml"

  | 3 ->
# 133 "lexer.mll"
 ( Buffer.add_char buf '\b'; lire_string buf lexbuf )
# 534 "lexer.ml"

  | 4 ->
# 135 "lexer.mll"
 ( Buffer.add_char buf '\012'; lire_string buf lexbuf )
# 539 "lexer.ml"

  | 5 ->
# 137 "lexer.mll"
 ( Buffer.add_char buf '\n'; lire_string buf lexbuf )
# 544 "lexer.ml"

  | 6 ->
# 139 "lexer.mll"
 ( Buffer.add_char buf '\r'; lire_string buf lexbuf )
# 549 "lexer.ml"

  | 7 ->
# 141 "lexer.mll"
 ( Buffer.add_char buf '\t'; lire_string buf lexbuf )
# 554 "lexer.ml"

  | 8 ->
# 143 "lexer.mll"
    ( Buffer.add_string buf (Lexing.lexeme lexbuf);
      lire_string buf lexbuf
    )
# 561 "lexer.ml"

  | 9 ->
# 147 "lexer.mll"
      ( raise (Lexical_error ("Illegal string character: " ^ Lexing.lexeme lexbuf)) )
# 566 "lexer.ml"

  | 10 ->
# 149 "lexer.mll"
      ( raise (Lexical_error ("String is not terminated")) )
# 571 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_lire_string_rec buf lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 66
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 153 "lexer.mll"
 ( new_line lexbuf; comment lexbuf )
# 583 "lexer.ml"

  | 1 ->
# 155 "lexer.mll"
 ( comment lexbuf; comment lexbuf )
# 588 "lexer.ml"

  | 2 ->
# 157 "lexer.mll"
 ( () )
# 593 "lexer.ml"

  | 3 ->
# 159 "lexer.mll"
 ( comment lexbuf )
# 598 "lexer.ml"

  | 4 ->
# 161 "lexer.mll"
 ( failwith "Unterminated comment" )
# 603 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and comment_line lexbuf =
    __ocaml_lex_comment_line_rec lexbuf 74
and __ocaml_lex_comment_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 165 "lexer.mll"
 ( () )
# 615 "lexer.ml"

  | 1 ->
# 167 "lexer.mll"
 ( comment_line lexbuf; comment_line lexbuf )
# 620 "lexer.ml"

  | 2 ->
# 169 "lexer.mll"
 ( () )
# 625 "lexer.ml"

  | 3 ->
# 171 "lexer.mll"
 ( comment_line lexbuf )
# 630 "lexer.ml"

  | 4 ->
# 173 "lexer.mll"
 ( failwith "Unterminated comment" )
# 635 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_line_rec lexbuf __ocaml_lex_state

;;

