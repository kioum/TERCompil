# 1 "lexer.mll"
 
  (* Analyse lexicale *)
  
  open Lexing
  open Parser
  
  let id_or_keyword =
    let h = Hashtbl.create 17 in
    List.iter (fun (s, k) -> Hashtbl.add h s k)
      [ "true",     CONST_BOOL(true);
	"false",    CONST_BOOL(false);
	"while",    WHILE;
	"if",       IF;
	"else",     ELSE;
	"int",      INT;
	"boolean",  BOOL;
	"class",    CLASS;
	"extends",  EXTENDS;
	"for",      FOR;
	"return",   RETURN;
	"new",      NEW;
	"public",   PUBLIC;
	"static",   STATIC;
	"this",     THIS;
	"void",     VOID;
	"instanceof", INSTOF;
      ] ;
    fun s ->
      try  Hashtbl.find h s
      with Not_found -> IDENT(s)
  
  (* DÃ©claration d'une exception *)
  exception Lexical_error of string

# 37 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\228\255\229\255\002\000\001\000\001\000\002\000\238\255\
    \003\000\001\000\004\000\004\000\243\255\244\255\245\255\246\255\
    \247\255\248\255\249\255\088\000\018\000\034\000\002\000\255\255\
    \253\255\242\255\235\255\234\255\236\255\237\255\232\255\231\255\
    \230\255\086\000\250\255\251\255\030\000\036\000\255\255\253\255\
    \254\255\252\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\027\000\027\000\022\000\027\000\255\255\
    \016\000\015\000\014\000\027\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\004\000\003\000\005\000\001\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\004\000\004\000\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\035\000\000\000\000\000\255\255\255\255\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\022\000\023\000\022\000\000\000\022\000\000\000\022\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \022\000\008\000\022\000\000\000\000\000\000\000\004\000\031\000\
    \021\000\018\000\007\000\010\000\013\000\009\000\027\000\026\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\011\000\012\000\005\000\006\000\030\000\029\000\
    \028\000\025\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\024\000\041\000\040\000\000\000\
    \000\000\000\000\000\000\039\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\017\000\000\000\016\000\000\000\019\000\
    \038\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\015\000\003\000\014\000\032\000\019\000\
    \036\000\000\000\000\000\000\000\000\000\037\000\000\000\000\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\000\000\000\000\000\000\000\000\019\000\
    \000\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\034\000\000\000\
    \000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\022\000\255\255\000\000\255\255\022\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\022\000\255\255\255\255\255\255\000\000\004\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\009\000\010\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\005\000\006\000\
    \008\000\011\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\021\000\036\000\037\000\255\255\
    \255\255\255\255\255\255\037\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000\255\255\000\000\
    \033\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\019\000\
    \033\000\255\255\255\255\255\255\255\255\033\000\255\255\255\255\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\255\255\255\255\255\255\255\255\019\000\
    \255\255\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\033\000\255\255\
    \255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 49 "lexer.mll"
      ( new_line lexbuf; token lexbuf )
# 171 "lexer.ml"

  | 1 ->
# 51 "lexer.mll"
      ( token lexbuf )
# 176 "lexer.ml"

  | 2 ->
# 53 "lexer.mll"
      ( comment lexbuf; token lexbuf )
# 181 "lexer.ml"

  | 3 ->
# 55 "lexer.mll"
      ( CONST_INT (int_of_string (lexeme lexbuf)) )
# 186 "lexer.ml"

  | 4 ->
# 57 "lexer.mll"
      ( id_or_keyword (lexeme lexbuf) )
# 191 "lexer.ml"

  | 5 ->
# 59 "lexer.mll"
      ( OP )
# 196 "lexer.ml"

  | 6 ->
# 61 "lexer.mll"
      ( CP )
# 201 "lexer.ml"

  | 7 ->
# 63 "lexer.mll"
      ( OC )
# 206 "lexer.ml"

  | 8 ->
# 65 "lexer.mll"
      ( CC )
# 211 "lexer.ml"

  | 9 ->
# 67 "lexer.mll"
      ( OA )
# 216 "lexer.ml"

  | 10 ->
# 69 "lexer.mll"
      ( CA )
# 221 "lexer.ml"

  | 11 ->
# 71 "lexer.mll"
      ( COMMA )
# 226 "lexer.ml"

  | 12 ->
# 73 "lexer.mll"
      ( SEMI )
# 231 "lexer.ml"

  | 13 ->
# 75 "lexer.mll"
      ( SET )
# 236 "lexer.ml"

  | 14 ->
# 77 "lexer.mll"
      ( PLUS )
# 241 "lexer.ml"

  | 15 ->
# 79 "lexer.mll"
      ( MINUS )
# 246 "lexer.ml"

  | 16 ->
# 81 "lexer.mll"
      ( NOT )
# 251 "lexer.ml"

  | 17 ->
# 83 "lexer.mll"
      ( MULT )
# 256 "lexer.ml"

  | 18 ->
# 85 "lexer.mll"
      ( EQUAL )
# 261 "lexer.ml"

  | 19 ->
# 87 "lexer.mll"
      ( NEQ )
# 266 "lexer.ml"

  | 20 ->
# 89 "lexer.mll"
      ( PUN )
# 271 "lexer.ml"

  | 21 ->
# 91 "lexer.mll"
      ( MUN )
# 276 "lexer.ml"

  | 22 ->
# 93 "lexer.mll"
      ( LT )
# 281 "lexer.ml"

  | 23 ->
# 95 "lexer.mll"
      ( LE )
# 286 "lexer.ml"

  | 24 ->
# 97 "lexer.mll"
      ( AND )
# 291 "lexer.ml"

  | 25 ->
# 99 "lexer.mll"
      ( OR )
# 296 "lexer.ml"

  | 26 ->
# 101 "lexer.mll"
      ( EOF )
# 301 "lexer.ml"

  | 27 ->
# 103 "lexer.mll"
      (
	(* Quelque chose d'inconnu *)
	raise (Lexical_error "CaractÃ¨re invalide")
      )
# 309 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 33
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 110 "lexer.mll"
 ( new_line lexbuf; comment lexbuf )
# 321 "lexer.ml"

  | 1 ->
# 112 "lexer.mll"
 ( comment lexbuf; comment lexbuf )
# 326 "lexer.ml"

  | 2 ->
# 114 "lexer.mll"
 ( comment lexbuf; comment lexbuf )
# 331 "lexer.ml"

  | 3 ->
# 116 "lexer.mll"
 ( () )
# 336 "lexer.ml"

  | 4 ->
# 118 "lexer.mll"
 ( comment lexbuf )
# 341 "lexer.ml"

  | 5 ->
# 120 "lexer.mll"
 ( failwith "Unterminated comment" )
# 346 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

