(* Syntaxe abstraite typée *)

module Symb_Tbl = Map.Make(String)
  
(* On programme est constitué de plusieurs fonctions, et on donne pour
   chacune son nom et sa définition. On pourrait aussi utiliser
   le type [function_info Symb_Tbl.t] *)
type program = (string * class_info) list

(*info de chaque classe*)
and class_info = {
  formals: (string * typ) list;
  locals: function_info Symb_Tbl.t;
}
  
and function_info = {
  (* Les mentions du type de retour et des types des paramètres seront
     utiles pour la vérification des types *)
  return:  typ option;
  formals: (string * typ) list;
  locals:  identifier_info Symb_Tbl.t;
  code:    block;
}
  
(* Différentes sortes de variables *)
and identifier_kind =
  | Local         (* Variable locale  *)
  | Formal of int (* Paramètre formel *)
  | Return        (* Résultat d'une fonction *)
and identifier_info = { typ: typ; kind: identifier_kind }
and typ =
  | TypInteger
  | TypBoolean
  | TypObject of class_info
