# 1 "lexer.mll"
 
  (* Analyse lexicale *)
  
  open Lexing
  open Parser
  
  let id_or_keyword =
    let h = Hashtbl.create 17 in
    List.iter (fun (s, k) -> Hashtbl.add h s k)
      [ "true",     CONST_BOOL(true);
	"false",    CONST_BOOL(false);
	"if",       IF;
	"else",     ELSE;
	"int",      INT;
	"boolean",  BOOL;
	"string", STRING;
	"class",    CLASS;
	"extends",  EXTENDS;
	"for",      FOR;
	"return",   RETURN;
	"new",      NEW;
	"public",   PUBLIC;
	"static",   STATIC;
	"this",     THIS;
	"void",     VOID;
	"instanceof", INSTOF;
	"null", NULL;
      ] ;
    fun s ->
      try  Hashtbl.find h s
      with Not_found -> IDENT(s)
  
  (* DÃ©claration d'une exception *)
  exception Lexical_error of string

# 38 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\224\255\225\255\002\000\001\000\002\000\003\000\236\255\
    \031\000\002\000\015\000\033\000\241\255\242\255\243\255\244\255\
    \245\255\246\255\247\255\249\255\250\255\088\000\163\000\053\000\
    \003\000\255\255\253\255\235\255\233\255\232\255\234\255\230\255\
    \228\255\227\255\226\255\145\000\245\255\146\000\134\000\255\255\
    \248\255\249\255\250\255\251\255\252\255\253\255\254\255\086\000\
    \250\255\251\255\082\000\088\000\255\255\253\255\254\255\252\255\
    ";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\031\000\031\000\026\000\024\000\255\255\
    \018\000\017\000\016\000\015\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\004\000\003\000\007\000\
    \001\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\008\000\009\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\004\000\004\000\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\037\000\000\000\037\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\
    \000\000\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\024\000\025\000\000\000\024\000\024\000\000\000\000\000\
    \024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \024\000\008\000\020\000\024\000\000\000\000\000\004\000\033\000\
    \023\000\018\000\007\000\010\000\013\000\009\000\019\000\029\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\028\000\012\000\006\000\011\000\005\000\032\000\
    \031\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\017\000\030\000\016\000\027\000\026\000\
    \052\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\015\000\003\000\014\000\034\000\021\000\
    \050\000\055\000\054\000\000\000\000\000\051\000\000\000\053\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\039\000\255\255\046\000\000\000\021\000\
    \000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\000\000\000\000\000\000\
    \000\000\000\000\045\000\000\000\000\000\000\000\000\000\000\000\
    \044\000\000\000\000\000\000\000\043\000\038\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\042\000\000\000\000\000\000\000\
    \041\000\000\000\040\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\048\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\036\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\024\000\000\000\255\255\255\255\
    \024\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\024\000\255\255\255\255\000\000\004\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\010\000\000\000\000\000\000\000\000\000\005\000\
    \006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\008\000\000\000\011\000\023\000\
    \047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\021\000\
    \047\000\050\000\051\000\255\255\255\255\047\000\255\255\051\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\035\000\037\000\038\000\255\255\021\000\
    \255\255\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\255\255\255\255\255\255\
    \255\255\255\255\038\000\255\255\255\255\255\255\255\255\255\255\
    \038\000\255\255\255\255\255\255\038\000\035\000\037\000\255\255\
    \255\255\255\255\255\255\255\255\038\000\255\255\255\255\255\255\
    \038\000\255\255\038\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\047\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\035\000\037\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 50 "lexer.mll"
      ( new_line lexbuf; token lexbuf )
# 196 "lexer.ml"

  | 1 ->
# 52 "lexer.mll"
      ( token lexbuf )
# 201 "lexer.ml"

  | 2 ->
# 54 "lexer.mll"
      ( comment lexbuf; token lexbuf )
# 206 "lexer.ml"

  | 3 ->
# 56 "lexer.mll"
      ( CONST_INT (Int32.of_string (lexeme lexbuf)) )
# 211 "lexer.ml"

  | 4 ->
# 58 "lexer.mll"
      ( id_or_keyword (lexeme lexbuf) )
# 216 "lexer.ml"

  | 5 ->
# 60 "lexer.mll"
      ( lire_string (Buffer.create 17) lexbuf )
# 221 "lexer.ml"

  | 6 ->
# 62 "lexer.mll"
      ( PT )
# 226 "lexer.ml"

  | 7 ->
# 64 "lexer.mll"
      ( OP )
# 231 "lexer.ml"

  | 8 ->
# 66 "lexer.mll"
      ( CP )
# 236 "lexer.ml"

  | 9 ->
# 68 "lexer.mll"
      ( OC )
# 241 "lexer.ml"

  | 10 ->
# 70 "lexer.mll"
      ( CC )
# 246 "lexer.ml"

  | 11 ->
# 72 "lexer.mll"
      ( OA )
# 251 "lexer.ml"

  | 12 ->
# 74 "lexer.mll"
      ( CA )
# 256 "lexer.ml"

  | 13 ->
# 76 "lexer.mll"
      ( COMMA )
# 261 "lexer.ml"

  | 14 ->
# 78 "lexer.mll"
      ( SEMI )
# 266 "lexer.ml"

  | 15 ->
# 80 "lexer.mll"
      ( SET )
# 271 "lexer.ml"

  | 16 ->
# 82 "lexer.mll"
      ( PLUS )
# 276 "lexer.ml"

  | 17 ->
# 84 "lexer.mll"
      ( MINUS )
# 281 "lexer.ml"

  | 18 ->
# 86 "lexer.mll"
      ( NOT )
# 286 "lexer.ml"

  | 19 ->
# 88 "lexer.mll"
      ( MULT )
# 291 "lexer.ml"

  | 20 ->
# 90 "lexer.mll"
      ( EQUAL )
# 296 "lexer.ml"

  | 21 ->
# 92 "lexer.mll"
      ( NEQ )
# 301 "lexer.ml"

  | 22 ->
# 94 "lexer.mll"
      ( PUN )
# 306 "lexer.ml"

  | 23 ->
# 96 "lexer.mll"
      ( MUN )
# 311 "lexer.ml"

  | 24 ->
# 98 "lexer.mll"
      ( LT )
# 316 "lexer.ml"

  | 25 ->
# 100 "lexer.mll"
      ( LE )
# 321 "lexer.ml"

  | 26 ->
# 102 "lexer.mll"
      ( MT )
# 326 "lexer.ml"

  | 27 ->
# 104 "lexer.mll"
      ( ME )
# 331 "lexer.ml"

  | 28 ->
# 106 "lexer.mll"
      ( AND )
# 336 "lexer.ml"

  | 29 ->
# 108 "lexer.mll"
      ( OR )
# 341 "lexer.ml"

  | 30 ->
# 110 "lexer.mll"
      ( EOF )
# 346 "lexer.ml"

  | 31 ->
# 112 "lexer.mll"
      (
	(* Quelque chose d'inconnu *)
	raise (Lexical_error "CaractÃ¨re invalide")
      )
# 354 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and lire_string buf lexbuf =
    __ocaml_lex_lire_string_rec buf lexbuf 35
and __ocaml_lex_lire_string_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 119 "lexer.mll"
 ( CONST_STRING (Buffer.contents buf) )
# 366 "lexer.ml"

  | 1 ->
# 121 "lexer.mll"
 ( Buffer.add_char buf '/'; lire_string buf lexbuf )
# 371 "lexer.ml"

  | 2 ->
# 123 "lexer.mll"
 ( Buffer.add_char buf '\\'; lire_string buf lexbuf )
# 376 "lexer.ml"

  | 3 ->
# 125 "lexer.mll"
 ( Buffer.add_char buf '\b'; lire_string buf lexbuf )
# 381 "lexer.ml"

  | 4 ->
# 127 "lexer.mll"
 ( Buffer.add_char buf '\012'; lire_string buf lexbuf )
# 386 "lexer.ml"

  | 5 ->
# 129 "lexer.mll"
 ( Buffer.add_char buf '\n'; lire_string buf lexbuf )
# 391 "lexer.ml"

  | 6 ->
# 131 "lexer.mll"
 ( Buffer.add_char buf '\r'; lire_string buf lexbuf )
# 396 "lexer.ml"

  | 7 ->
# 133 "lexer.mll"
 ( Buffer.add_char buf '\t'; lire_string buf lexbuf )
# 401 "lexer.ml"

  | 8 ->
# 135 "lexer.mll"
    ( Buffer.add_string buf (Lexing.lexeme lexbuf);
      lire_string buf lexbuf
    )
# 408 "lexer.ml"

  | 9 ->
# 139 "lexer.mll"
      ( raise (Lexical_error ("Illegal string character: " ^ Lexing.lexeme lexbuf)) )
# 413 "lexer.ml"

  | 10 ->
# 141 "lexer.mll"
      ( raise (Lexical_error ("String is not terminated")) )
# 418 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_lire_string_rec buf lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 47
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 145 "lexer.mll"
 ( new_line lexbuf; comment lexbuf )
# 430 "lexer.ml"

  | 1 ->
# 147 "lexer.mll"
 ( comment lexbuf; comment lexbuf )
# 435 "lexer.ml"

  | 2 ->
# 149 "lexer.mll"
 ( comment lexbuf; comment lexbuf )
# 440 "lexer.ml"

  | 3 ->
# 151 "lexer.mll"
 ( () )
# 445 "lexer.ml"

  | 4 ->
# 153 "lexer.mll"
 ( comment lexbuf )
# 450 "lexer.ml"

  | 5 ->
# 155 "lexer.mll"
( failwith "Unterminated comment" )
# 455 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

